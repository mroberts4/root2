#define _CRT_SECURE_NO_WARNINGS

#include "convLayer.h"
#include <iostream>

using namespace std;

ConvLayer::ConvLayer(int weightName, int nInputNum, int nOutputNum, int nInputWidth, int nKernelWidth, int nPad, int nStride, int nGroup, int biasName) :
    m_nInputNum(nInputNum), m_nOutputNum(nOutputNum), m_nInputWidth(nInputWidth),
    m_nKernelWidth(nKernelWidth), m_nPad(nPad), m_nStride(nStride), m_nGroup(nGroup)
{
    m_nKernelSize = m_nKernelWidth * m_nKernelWidth;
    m_nInputSize = m_nInputWidth * m_nInputWidth;
    m_nInputPadWidth = m_nInputWidth + 2 * m_nPad;
    m_nInputPadSize = m_nInputPadWidth * m_nInputPadWidth;
    m_nOutputWidth = int((m_nInputPadWidth - m_nKernelWidth) / m_nStride + 1);
    m_nOutputSize = m_nOutputWidth * m_nOutputWidth;
    
	m_pfInputPad = new float[m_nInputNum * m_nInputPadWidth * m_nInputPadWidth];

    m_nInputGroupNum = m_nInputNum / m_nGroup;
    m_nOutputGroupNum = m_nOutputNum / m_nGroup;

    m_pfWeight = new float[m_nOutputNum * m_nInputGroupNum * m_nKernelSize];

    if (m_pcBname != NULL)
        m_pfBias = new float[m_nOutputNum];
    m_pfOutput = new float[m_nOutputNum * m_nOutputSize];

	switch(weightName)
	{
		case(1):
			ReadConvWb1();
			break;
	}
}

ConvLayer::~ConvLayer()
{
    delete[] m_pfOutput;
    if (m_pcBname != NULL)
        delete[] m_pfBias;
    delete[] m_pfWeight;
	delete[] m_pfInputPad;
}

void ConvLayer::forward(float *pfInput)
{
    Addpad(pfInput);

    for (int g = 0; g < m_nGroup; g++)
    {
        for (int nOutmapIndex = 0; nOutmapIndex < m_nOutputGroupNum; nOutmapIndex++)
        {
            for (int i = 0; i < m_nOutputWidth; i++)
            {
                for (int j = 0; j < m_nOutputWidth; j++)
                {
                    float fSum = 0;
                    int nInputIndex, nOutputIndex, nKernelIndex, nInputIndexStart, nKernelStart;
                    nOutputIndex = g * m_nInputGroupNum * m_nOutputSize + nOutmapIndex * m_nOutputSize + i * m_nOutputWidth + j;
                    for (int k = 0; k < m_nInputGroupNum; k++)
                    {
                        nInputIndexStart = g * m_nInputGroupNum * m_nInputPadSize + k * m_nInputPadSize + (i * m_nStride) * m_nInputPadWidth + (j * m_nStride);
                        nKernelStart = g * m_nOutputGroupNum * m_nKernelSize + nOutmapIndex * m_nInputGroupNum * m_nKernelSize + k * m_nKernelSize;
                        for (int m = 0; m < m_nKernelWidth; m++)
                        {
                            for (int n = 0; n < m_nKernelWidth; n++)
                            {
                                nKernelIndex = nKernelStart + m * m_nKernelWidth + n;
                                nInputIndex = nInputIndexStart + m * m_nInputPadWidth + n;
                                fSum += m_pfInputPad[nInputIndex] * m_pfWeight[nKernelIndex];
                            }
                        }
                    }
                    if (m_pcBname != NULL)
                        fSum += m_pfBias[nOutmapIndex];

                    m_pfOutput[nOutputIndex] = fSum;
                }
            }
        }              
    }
}

void ConvLayer::ReadConvWb1()
{
	int nWsize = m_nOutputNum * m_nInputGroupNum * m_nKernelSize;
	m_pfWeight = new float[nWsize] {-8.78032e-07, -7.4436e-07, 3.63354e-07, -3.3522e-07, -5.29953e-07, 1.6597e-08, -1.17232e-06, -1.2506e-06, -1.0064e-06, -7.52674e-07, 
-3.25939e-07, 3.51299e-07, -1.11822e-07, -5.27427e-07, -3.47994e-07, 2.27993e-08, -1.27595e-06, -8.65585e-07, -6.0626e-07, -3.36897e-07, 
-3.63011e-08, -5.87131e-07, -7.0969e-07, -9.57949e-08, 8.56798e-09, -5.26638e-07, -5.11375e-07, 0.00886196, 0.0357769, -0.00778829, 
0.110731, -0.103673, -0.203748, 0.0604897, 0.0154405, -0.115601, 0.111215, -0.0168596, -0.18603, 0.154449, 
-0.28699, -0.490526, 0.111913, -0.0527142, -0.1969, 0.0368378, -0.0099768, -0.124592, 0.144294, -0.182651, 
-0.356714, 0.0358367, -0.0185475, -0.149542, -0.018843, 0.00991136, -0.00317611, 0.0261373, -0.134661, -0.162605, 
-0.0273701, 0.137786, 0.194369, 0.0313723, 0.0317805, -0.0364644, 0.0736378, -0.503994, -0.657201, 0.00912727, 
0.420397, 0.683485, -0.00836829, 0.0463911, 0.0246689, 0.0269661, -0.292484, -0.383575, -0.0174866, 0.209074, 
0.36043, 0.0659268, 0.176554, 0.217573, 0.129266, 0.270163, 0.295868, 0.165021, 0.267479, 0.270282, 
-0.0643649, -0.249915, -0.220541, -0.224293, -0.421865, -0.364307, -0.186403, -0.355824, -0.268813, 0.105343, 
0.0570823, 0.0334961, 0.101821, 0.0464219, 0.0191906, 0.0690329, 0.0654021, 0.141483, 0.0950114, -0.0142723, 
-0.0759343, -0.025078, -0.138662, -0.144093, -0.0798923, -0.163086, -0.143257, -0.0908875, -0.20354, -0.19801, 
-0.269973, -0.415537, -0.37387, -0.230755, -0.376678, -0.381107, 0.0146585, 0.275157, 0.265059, 0.244029, 
0.563378, 0.538267, 0.231919, 0.518668, 0.457109, 0.104694, -0.0163697, -0.0473475, -0.0467692, -0.197907, 
-0.00847315, -0.0521973, 0.258915, -0.0136073, 0.321299, -0.150349, -0.115065, -0.218488, -0.627973, -0.0559739, 
-0.0440349, 0.814871, 0.0915975, 0.163872, -0.0580286, -0.0829275, -0.126366, -0.33785, -0.0323095, -0.0129259, 
0.469479, 0.0346819, -0.0217146, 0.0123999, 0.106513, 0.00307743, -0.0417368, -0.101919, -0.0130511, -0.0393857, 
-0.221375, 0.0441658, 0.040443, 0.0992237, 0.0119728, -0.182083, -0.347511, -0.0379163, -0.226434, -0.575121, 
0.016818, 0.0267539, 0.120834, 0.00332573, -0.0618526, -0.175924, -0.0167067, -0.0808863, -0.354281, 0.0283103, 
0.136636, 0.103747, 0.03894, 0.110499, 0.0266268, -0.0158572, 0.0318455, -0.0901485, 0.0394129, 0.240099, 
0.179927, 0.0581161, 0.238319, 0.0890975, -0.0377793, 0.00793494, -0.205931, -0.00116467, 0.209624, 0.174268, 
0.0598846, 0.189815, 0.0679023, -0.0349465, -0.00602568, -0.190186, -9.97914e-08, -1.67078e-08, 1.55527e-07, 2.50705e-07, 
-4.09598e-07, 1.79393e-07, -1.61982e-07, 1.97198e-07, -6.03847e-07, -7.15356e-07, 1.03379e-07, 9.7734e-08, -6.8578e-07, -2.29346e-07, 
-8.17958e-07, 8.50276e-08, -3.97484e-07, 1.17472e-07, -9.52125e-07, -6.65527e-07, -4.77032e-07, -1.05573e-06, -1.20872e-07, -6.66404e-07, 
-7.17534e-07, -8.67896e-07, -8.70026e-07, 6.56095e-07, -2.01733e-08, 5.67522e-07, -5.25172e-07, 1.64712e-07, 6.19242e-07, -3.66075e-07, 
-1.51193e-07, -2.40135e-07, 6.27728e-07, 4.7326e-08, -9.04138e-08, 4.22389e-07, -1.6862e-07, 6.23952e-07, -2.14972e-07, -5.56403e-07, 
-4.25182e-07, -2.07806e-07, -1.01673e-07, 5.36287e-07, 4.05675e-07, 1.41585e-07, -8.83771e-08, -4.18574e-07, 1.50863e-07, -1.04473e-07, 
-3.85654e-07, -1.96887e-07, 3.66546e-07, 6.50896e-08, -1.66316e-07, -6.75818e-07, 5.53081e-07, 2.44893e-07, 5.40558e-07, -8.2895e-08, 
-4.92031e-07, 4.19393e-07, -2.77614e-07, -6.22126e-07, -5.90675e-07, -2.48823e-07, 4.87645e-07, -7.66126e-08, 2.90903e-07, 4.01362e-07, 
-5.10816e-07, 6.60507e-08, -6.22854e-07, 6.89941e-09, 2.74379e-07, -2.93347e-07, -6.38938e-07, -0.0274475, 0.124726, 0.0524735, 
0.0375515, 0.334316, 0.359842, -0.0028877, 0.279217, 0.389226, 0.0490192, 0.132104, 0.115461, 0.0367489, 
0.123749, 0.114218, -0.0074529, 0.0876504, 0.0744672, -0.0619617, -0.271048, -0.18396, -0.123717, -0.495268, 
-0.523301, 0.0358603, -0.310538, -0.44239, 0.0469683, 0.0140349, -0.0129509, 0.0993617, 0.0582354, -0.0699379, 
0.001887, 0.14972, 0.00824202, 0.0969507, 0.0460379, -0.186331, 0.172279, 0.218964, -0.0761616, 0.0080207, 
0.371403, 0.167013, 0.0985624, 0.0463666, -0.0693196, 0.123528, 0.115494, -0.0856408, -0.0168502, 0.246118, 
0.091071, -1.51713e-07, -4.7616e-08, 5.06546e-07, -5.97957e-07, -5.53553e-09, -6.09296e-07, 5.76501e-09, -5.59323e-07, -1.7645e-07, 
1.9365e-07, 2.49947e-07, 1.08143e-07, -4.12544e-07, -2.15655e-07, 3.21478e-08, 5.38487e-07, 5.81832e-07, -4.94742e-07, 4.98983e-07, 
-2.72113e-07, -3.33527e-07, 2.29325e-07, -2.11438e-08, 4.25558e-07, 5.89532e-08, 4.70095e-07, -5.52572e-07, 7.54503e-08, 3.5795e-07, 
-2.85517e-07, 2.23981e-07, -3.45597e-07, 5.48582e-07, -6.88964e-08, 3.42468e-07, 6.09146e-07, -9.74182e-09, 2.8656e-07, 4.09284e-07, 
5.00457e-07, -5.43353e-08, 7.74874e-07, -2.12489e-07, -1.93301e-07, -1.1143e-07, 5.15641e-07, 1.5881e-07, 3.29533e-07, 5.56186e-07, 
3.15173e-08, -1.5724e-07, 7.00595e-07, 6.48888e-07, 3.49504e-07, 0.0265142, 0.129749, 0.0162486, -0.130644, -0.14126, 
-0.0154692, 0.0539507, 0.073714, 0.0152144, 0.280535, 0.478302, 0.18509, -0.506975, -0.572602, -0.126233, 
0.122972, 0.0993025, -0.00859083, 0.129238, 0.275908, 0.0807801, -0.24917, -0.299448, -0.0697036, 0.0669787, 
0.0735143, -0.0169482, -0.0235188, 0.0493892, 0.0174569, -0.199658, 0.183732, -0.0332156, -0.0192193, 0.112198, 
-0.00621675, -0.140754, 0.23344, -0.0265214, -0.695675, 0.600782, -0.0446683, -0.172376, 0.379011, -0.171656, 
-0.0480256, 0.11065, -0.0116235, -0.373704, 0.277852, -0.0431304, -0.0736631, 0.225718, -0.0909145, 0.0261777, 
0.0186551, -0.0250313, 0.0214077, -0.151847, 0.0586201, 0.148944, -0.0782959, -0.00025716, 0.0998513, 0.0774269, 
0.00571237, 0.102963, -0.50813, 0.142147, 0.556066, -0.426299, -0.0998124, 0.0532183, 0.0663186, -0.0032258, 
0.0641655, -0.27674, 0.102359, 0.321164, -0.222944, -0.0767599, -0.0622514, -0.271124, -0.254169, -0.243692, 
-0.448608, -0.40451, -0.189678, -0.377019, -0.285579, 0.266678, 0.425514, 0.472996, 0.431863, 0.611828, 
0.698978, 0.394173, 0.583925, 0.601427, -0.17325, -0.195494, -0.221111, -0.161855, -0.211246, -0.260156, 
-0.148895, -0.218374, -0.240063, 0.0333266, -0.00060132, 0.00815743, 0.0455526, 0.0797377, 0.135887, 0.00180208, 
-0.0269208, 0.0757017, 0.120546, 0.046157, 0.0600756, 0.122717, 0.108089, 0.179842, 0.102984, 0.00852519, 
0.141256, 0.0690247, 0.017932, 0.046915, 0.0196744, 0.0229834, 0.114338, -0.00488046, -0.0656023, 0.085555, 
-0.0618225, 0.0087918, 0.0152239, 0.0922913, 0.0670032, 0.0225285, -0.12964, -0.0995334, 0.128748, 0.0106226, 
0.0438733, 0.0544482, 0.0824438, -0.0183444, -0.00041624, -0.318914, -0.330054, 0.062371, -0.00435264, 0.0327597, 
0.0192802, 0.133343, 0.00685734, 0.0228731, -0.262357, -0.278686, 0.118236, -0.0676567, 0.0152462, 0.0211143, 
0.108745, 0.13131, 0.0241819, 0.0863909, 0.096478, 0.0173951, 0.269546, 0.330095, 0.368589, 0.325397, 
0.352495, 0.341591, 0.2005, 0.245899, 0.271036, -0.196768, -0.450708, -0.341371, -0.32437, -0.497198, 
-0.376735, -0.31802, -0.388161, -0.250647 };
}

float *ConvLayer::GetOutput()
{
    return m_pfOutput;
}

void ConvLayer::Addpad(float *pfInput)
{
	for (int m = 0; m < m_nInputNum; m++)
	{
		for (int i = 0; i < m_nInputPadWidth; i++)
		{
			for (int j = 0; j < m_nInputPadWidth; j++)
			{
                if ((i < m_nPad) || (i >= m_nInputPadWidth - m_nPad))
                {
                    m_pfInputPad[m * m_nInputPadSize + i * m_nInputPadWidth + j] = 0;
                }
                else if ((j < m_nPad) || (j >= m_nInputPadWidth - m_nPad))
                {
                    m_pfInputPad[m * m_nInputPadSize + i * m_nInputPadWidth + j] = 0;
                }
                else
                {
                    m_pfInputPad[m * m_nInputPadSize + i * m_nInputPadWidth + j] = pfInput[m * m_nInputSize + (i - m_nPad) * m_nInputWidth + (j - m_nPad)];
                }
			}
		}
	}
}

int ConvLayer::GetOutputSize()
{
    return m_nOutputNum * m_nOutputSize;
}
